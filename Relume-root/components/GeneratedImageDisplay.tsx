/**
 * Generated Image Display Component
 * 
 * This component displays images generated by Google Cloud's Vertex AI.
 * It handles loading states, error states, and optimizes image display.
 */

'use client';

import React, { useState, useEffect } from 'react';
import Image from 'next/image';
import { createClient } from '@supabase/supabase-js';

// Types
interface GeneratedImageDisplayProps {
  imagePath?: string;
  fallbackSrc?: string;
  alt: string;
  width?: number;
  height?: number;
  priority?: boolean;
  className?: string;
  objectFit?: 'contain' | 'cover' | 'fill' | 'none' | 'scale-down';
  onLoad?: () => void;
  onError?: () => void;
}

// Initialize Supabase client
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || '';
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || '';
const supabase = createClient(supabaseUrl, supabaseAnonKey);

/**
 * GeneratedImageDisplay Component
 * 
 * Displays an image from Supabase storage with fallback and loading states.
 */
export function GeneratedImageDisplay({
  imagePath,
  fallbackSrc,
  alt,
  width = 800,
  height = 600,
  priority = false,
  className = '',
  objectFit = 'cover',
  onLoad,
  onError,
}: GeneratedImageDisplayProps) {
  const [imageUrl, setImageUrl] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [hasError, setHasError] = useState(false);
  
  useEffect(() => {
    async function getImageUrl() {
      if (!imagePath) {
        setHasError(true);
        setIsLoading(false);
        onError?.();
        return;
      }
      
      try {
        // Normalize path (remove leading slash if present)
        const normalizedPath = imagePath.startsWith('/') ? imagePath.substring(1) : imagePath;
        
        // Get public URL from Supabase
        const { data: { publicUrl } } = supabase.storage
          .from('images')
          .getPublicUrl(normalizedPath);
        
        setImageUrl(publicUrl);
        setIsLoading(false);
      } catch (error) {
        console.error('Error fetching image URL:', error);
        setHasError(true);
        setIsLoading(false);
        onError?.();
      }
    }
    
    getImageUrl();
  }, [imagePath, onError]);
  
  // Handle image load success
  const handleImageLoad = () => {
    setIsLoading(false);
    onLoad?.();
  };
  
  // Handle image load error
  const handleImageError = () => {
    setHasError(true);
    setIsLoading(false);
    onError?.();
  };
  
  // Show loading state
  if (isLoading) {
    return (
      <div 
        className={`relative bg-gray-200 animate-pulse ${className}`}
        style={{ width: width || '100%', height: height || '100%' }}
      >
        <div className="absolute inset-0 flex items-center justify-center">
          <svg className="w-10 h-10 text-gray-400" fill="none" viewBox="0 0 24 24">
            <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
            <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
        </div>
      </div>
    );
  }
  
  // Show fallback image if there's an error or no image URL
  if (hasError || !imageUrl) {
    if (fallbackSrc) {
      return (
        <Image
          src={fallbackSrc}
          alt={alt}
          width={width}
          height={height}
          className={className}
          style={{ objectFit }}
          priority={priority}
        />
      );
    }
    
    // Show error state if no fallback
    return (
      <div 
        className={`relative bg-gray-100 border border-gray-300 ${className}`}
        style={{ width: width || '100%', height: height || '100%' }}
      >
        <div className="absolute inset-0 flex flex-col items-center justify-center p-4 text-center">
          <svg className="w-12 h-12 text-gray-400 mb-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
          </svg>
          <p className="text-gray-500 text-sm">Image not available</p>
        </div>
      </div>
    );
  }
  
  // Show the image
  return (
    <Image
      src={imageUrl}
      alt={alt}
      width={width}
      height={height}
      className={className}
      style={{ objectFit }}
      priority={priority}
      onLoad={handleImageLoad}
      onError={handleImageError}
    />
  );
}

/**
 * Example usage:
 * 
 * <GeneratedImageDisplay
 *   imagePath="/images/windows/double-hung/hero-123456789.jpg"
 *   fallbackSrc="/images/placeholders/window-placeholder.jpg"
 *   alt="Double Hung Window"
 *   width={800}
 *   height={600}
 *   priority={true}
 *   className="rounded-lg"
 * />
 */
