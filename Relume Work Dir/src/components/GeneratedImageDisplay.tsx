/**
 * GeneratedImageDisplay Component
 * 
 * This component displays images generated by Google Cloud's Vertex AI.
 * It supports various display modes and fallback options.
 */

import React, { useState, useEffect } from 'react';
import Image from 'next/image';
import { createClient } from '@supabase/supabase-js';

// Types
interface GeneratedImageDisplayProps {
  /** Path to the image in Supabase storage */
  imagePath: string;
  /** Alternative text for the image */
  alt: string;
  /** Width of the image in pixels */
  width: number;
  /** Height of the image in pixels */
  height: number;
  /** Optional CSS class name */
  className?: string;
  /** Optional fallback image URL if the generated image is not available */
  fallbackImageUrl?: string;
  /** Optional loading state indicator */
  showLoading?: boolean;
  /** Optional object-fit style (default: 'cover') */
  objectFit?: 'cover' | 'contain' | 'fill' | 'none' | 'scale-down';
  /** Optional object-position style (default: 'center') */
  objectPosition?: string;
  /** Optional quality setting (1-100, default: 75) */
  quality?: number;
  /** Optional priority loading flag */
  priority?: boolean;
}

/**
 * Component for displaying generated images from Supabase storage
 */
export default function GeneratedImageDisplay({
  imagePath,
  alt,
  width,
  height,
  className = '',
  fallbackImageUrl = '/images/placeholder.jpg',
  showLoading = true,
  objectFit = 'cover',
  objectPosition = 'center',
  quality = 75,
  priority = false,
}: GeneratedImageDisplayProps) {
  const [imageUrl, setImageUrl] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchImageUrl = async () => {
      try {
        setIsLoading(true);
        setError(null);

        // Initialize Supabase client
        const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
        const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;
        
        if (!supabaseUrl || !supabaseAnonKey) {
          throw new Error('Supabase credentials are not configured');
        }
        
        const supabase = createClient(supabaseUrl, supabaseAnonKey);
        
        // Normalize the path (remove leading slash if present)
        const normalizedPath = imagePath.startsWith('/') ? imagePath.substring(1) : imagePath;
        
        // Get public URL from Supabase storage
        const { data: { publicUrl } } = supabase.storage
          .from('images')
          .getPublicUrl(normalizedPath);
          
        setImageUrl(publicUrl);
      } catch (err) {
        console.error('Error fetching image URL:', err);
        setError('Failed to load image');
        setImageUrl(fallbackImageUrl);
      } finally {
        setIsLoading(false);
      }
    };

    fetchImageUrl();
  }, [imagePath, fallbackImageUrl]);

  // Show loading state
  if (isLoading && showLoading) {
    return (
      <div 
        className={`relative flex items-center justify-center bg-gray-100 ${className}`}
        style={{ width, height }}
      >
        <div className="animate-pulse flex space-x-4">
          <div className="flex-1 space-y-4 py-1">
            <div className="h-4 bg-gray-300 rounded w-3/4"></div>
            <div className="space-y-2">
              <div className="h-4 bg-gray-300 rounded"></div>
              <div className="h-4 bg-gray-300 rounded w-5/6"></div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  // Show error state or fallback image
  if (error || !imageUrl) {
    return (
      <Image
        src={fallbackImageUrl}
        alt={`${alt} (fallback)`}
        width={width}
        height={height}
        className={className}
        style={{
          objectFit,
          objectPosition,
        }}
        quality={quality}
        priority={priority}
      />
    );
  }

  // Show the generated image
  return (
    <Image
      src={imageUrl}
      alt={alt}
      width={width}
      height={height}
      className={className}
      style={{
        objectFit,
        objectPosition,
      }}
      quality={quality}
      priority={priority}
      onError={() => {
        setError('Failed to load image');
        setImageUrl(fallbackImageUrl);
      }}
    />
  );
}
